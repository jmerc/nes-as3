
<!-- saved from url=(0055)http://www.obelisk.demon.co.uk/6502/addressing.html#ZPG -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
  <meta name="GENERATOR" content="Microsoft FrontPage 4.0">
  
  <title>6502 Addressing Modes</title>
  <link rel="StyleSheet" href="./6502 Addressing Modes_files/obelisk.css" type="text/css" media="screen,print">
</head>
<body>
<script async="" type="text/javascript" src="./6502 Addressing Modes_files/ca-pub-0826595092783671.js"></script><script type="text/javascript"><!--
google_ad_client = "pub-0826595092783671";
/* 6502 Header */
google_ad_slot = "9208748029";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="./6502 Addressing Modes_files/show_ads.js">
</script><ins id="aswift_0_expand" style="display:inline-table;border:none;height:90px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent"><ins id="aswift_0_anchor" style="display:block;border:none;height:90px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent"><iframe width="728" height="90" frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_0" name="aswift_0" style="left:0;position:absolute;top:0;"></iframe></ins></ins>
<hr>
<h2>Addressing Modes</h2>

<p>The 6502 processor provides several ways in which memory locations
can be addressed. Some instructions support several different
modes while others may only support one. In addition the two index
registers can not always be used interchangeably. This lack of
orthogonality in the instruction set is one of the features that
makes the 6502 trickier to program well.</p>

<h3><a name="IMP"></a>Implicit</h3>

<p>For many 6502 instructions the source and destination of the
information to be manipulated is implied directly by the function
of the instruction itself and no further operand needs to be specified.
Operations like 'Clear Carry Flag' (<a href="http://www.obelisk.demon.co.uk/6502/reference.html#CLC">CLC</a>)
and 'Return from Subroutine' (<a href="http://www.obelisk.demon.co.uk/6502/reference.html#RTS">RTS</a>)
are implicit.</p>

<h3><a name="IMP"></a>Accumulator</h3>

<p>Some instructions have an option to operate directly upon the
accumulator. The programmer specifies this by using a special
operand value, 'A'. For example:</p>

<pre>        LSR A           ;Logical shift right one bit
        ROR A           ;Rotate right one bit</pre>

<h3><a name="IMM"></a>Immediate</h3>

<p>Immediate addressing allows the programmer to directly specify
an 8 bit constant within the instruction. It is indicated by a
'#' symbol followed by an numeric expression. For example:</p>

<pre>        LDA #10         ;Load 10 ($0A) into the accumulator
        LDX #LO LABEL   ;Load the LSB of a 16 bit address into X
        LDY #HI LABEL   ;Load the MSB of a 16 bit address into Y</pre>

<h3><a name="ZPG"></a>Zero Page</h3>

<p>An instruction using zero page addressing mode has only an
8 bit address operand. This limits it to addressing only the first
256 bytes of memory (e.g. $0000 to $00FF) where the most significant
byte of the address is always zero. In zero page mode only the
least significant byte of the address is held in the instruction
making it shorter by one byte (important for space saving) and
one less memory fetch during execution (important for speed).</p>

<p>An assembler will automatically select zero page addressing
mode if the operand evaluates to a zero page address and the instruction
supports the mode (not all do).</p>

<pre>        LDA $00         ;Load accumulator from $00
        ASL ANSWER      ;Shift labelled location ANSWER left</pre>

<h3><a name="ZPX"></a>Zero Page,X</h3>

<p>The address to be accessed by an instruction using indexed
zero page addressing is calculated by taking the 8 bit zero page
address from the instruction and adding the current value of the
X register to it. For example if the X register contains $0F and
the instruction LDA $80,X is executed then the accumulator will
be loaded from $008F (e.g. $80 + $0F =&gt; $8F).</p>

<p><b>NB</b>:<br>
The address calculation wraps around if the sum of the base address
and the register exceed $FF. If we repeat the last example but
with $FF in the X register then the accumulator will be loaded
from $007F (e.g. $80 + $FF =&gt; $7F) and not $017F.</p>

<pre>        STY $10,X       ;Save the Y register at location on zero page
        AND TEMP,X      ;Logical AND accumulator with a zero page value</pre>

<h3><a name="ZPY"></a>Zero Page,Y</h3>

<p>The address to be accessed by an instruction using indexed
zero page addressing is calculated by taking the 8 bit zero page
address from the instruction and adding the current value of the
Y register to it. This mode can only be used with the <a href="http://www.obelisk.demon.co.uk/6502/reference.html#LDX">LDX</a>
and <a href="http://www.obelisk.demon.co.uk/6502/reference.html#STX">STX</a> instructions.</p>

<pre>        LDX $10,Y       ;Load the X register from a location on zero page
        STX TEMP,Y      ;Store the X register in a location on zero page</pre>

<h3><a name="REL"></a>Relative</h3>

<p>Relative addressing mode is used by branch instructions (e.g.
<a href="http://www.obelisk.demon.co.uk/6502/reference.html#BEQ">BEQ</a>, <a href="http://www.obelisk.demon.co.uk/6502/reference.html#BNE">BNE</a>,
etc.) which contain a signed 8 bit relative offset (e.g. -128
to +127) which is added to program counter if the condition is
true. As the program counter itself is incremented during instruction
execution by two the effective address range for the target instruction
must be with -126 to +129 bytes of the branch.</p>

<pre>        BEQ LABEL       ;Branch if zero flag set to LABEL
        BNE *+4         ;Skip over the following 2 byte instruction</pre>

<h3><a name="ABS"></a>Absolute</h3>

<p>Instructions using absolute addressing contain a full 16 bit
address to identify the target location.</p>

<pre>        JMP $1234       ;Jump to location $1234
        JSR WIBBLE      ;Call subroutine WIBBLE</pre>

<h3><a name="ABX"></a>Absolute,X</h3>

<p>The address to be accessed by an instruction using X register
indexed absolute addressing is computed by taking the 16 bit address
from the instruction and added the contents of the X register.
For example if X contains $92 then an STA $2000,X instruction
will store the accumulator at $2092 (e.g. $2000 + $92).</p>

 <pre>        STA $3000,X     ;Store accumulator between $3000 and $30FF
        ROR CRC,X       ;Rotate right one bit</pre>

<h3><a name="ABY"></a>Absolute,Y</h3>

<p>The Y register indexed absolute addressing mode is the same
as the previous mode only with the contents of the Y register
added to the 16 bit address from the instruction.</p>

<pre>        AND $4000,Y     ;Perform a logical AND with a byte of memory
        STA MEM,Y       ;Store accumulator in memory</pre>

<h3><a name="IND"></a>Indirect</h3>

<p><a href="http://www.obelisk.demon.co.uk/6502/reference.html#JMP">JMP</a> is the only 6502 instruction
to support indirection. The instruction contains a 16 bit address
which identifies the location of the least significant byte of
another 16 bit memory address which is the real target of the
instruction.</p>

<p>For example if location $0120 contains $FC and location $0121
contains $BA then the instruction JMP ($0120) will cause the next
instruction execution to occur at $BAFC (e.g. the contents of
$0120 and $0121).</p>

<pre>        JMP ($FFFC)     ;Force a power on reset
        JMP (TARGET)    ;Jump via a labelled memory area</pre>

<h3><a name="IDX"></a>Indexed Indirect</h3>

<p>Indexed indirect addressing is normally used in conjunction with a table of address held on zero page. The address of the
table is taken from the instruction and the X register added to
it (with zero page wrap around) to give the location of the least
significant byte of the target address.</p>

 <pre>        LDA ($40,X)     ;Load a byte indirectly from memory
        STA (MEM,X)     ;Store accumulator indirectly into memory</pre>

<h3><a name="IDY"></a>Indirect Indexed</h3>

<p>Indirect indirect addressing is the most common indirection
mode used on the 6502. In instruction contains the zero page location
of the least significant byte of 16 bit address. The Y register
is dynamically added to this value to generated the actual target
address for operation.</p>

 <pre>        LDA ($40),Y     ;Load a byte indirectly from memory
        STA (DST),Y     ;Store accumulator indirectly into memory</pre>

<p><table border="0" cellpadding="0" cellspacing="0" width="100%" height="30">
  <tbody><tr>
    <td width="25%" bgcolor="#aaaaff">&nbsp;<a href="http://www.obelisk.demon.co.uk/6502/instructions.html">&lt;&lt;
      Back</a></td>
    <td width="25%" bgcolor="#aaaaff">
      <p></p><center><a href="http://www.obelisk.demon.co.uk/index.html" target="_parent">Home</a></center></td>
    <td width="25%" bgcolor="#aaaaff">
      <p></p><center><a href="http://www.obelisk.demon.co.uk/6502/index.html">Contents</a></center></td>
    <td align="RIGHT" width="25%" bgcolor="#aaaaff"><a href="http://www.obelisk.demon.co.uk/6502/algorithms.html">Next
      &gt;&gt;</a></td>
  </tr>
</tbody></table>
</p><p>
</p><hr>
<script type="text/javascript"><!--
google_ad_client = "pub-0826595092783671";
/* 6502 Footer */
google_ad_slot = "9966603696";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript" src="./6502 Addressing Modes_files/show_ads.js">
</script><ins id="aswift_1_expand" style="display:inline-table;border:none;height:90px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent"><ins id="aswift_1_anchor" style="display:block;border:none;height:90px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent"><iframe width="728" height="90" frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_1" name="aswift_1" style="left:0;position:absolute;top:0;"></iframe></ins></ins>
<hr>
<script type="text/javascript"><!--
google_ad_client = "pub-0826595092783671";
/* 6502 Links */
google_ad_slot = "4173075094";
google_ad_width = 728;
google_ad_height = 15;
//-->
</script>
<script type="text/javascript" src="./6502 Addressing Modes_files/show_ads.js">
</script><ins id="aswift_2_expand" style="display:inline-table;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent"><ins id="aswift_2_anchor" style="display:block;border:none;height:15px;margin:0;padding:0;position:relative;visibility:visible;width:728px;background-color:transparent"><iframe width="728" height="15" frameborder="0" marginwidth="0" marginheight="0" vspace="0" hspace="0" allowtransparency="true" scrolling="no" allowfullscreen="true" onload="var i=this.id,s=window.google_iframe_oncopy,H=s&amp;&amp;s.handlers,h=H&amp;&amp;H[i],w=this.contentWindow,d;try{d=w.document}catch(e){}if(h&amp;&amp;d&amp;&amp;(!d.body||!d.body.firstChild)){if(h.call){setTimeout(h,0)}else if(h.match){try{h=s.upd(h,i)}catch(e){}w.location.replace(h)}}" id="aswift_2" name="aswift_2" style="left:0;position:absolute;top:0;"></iframe></ins></ins>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script><script src="./6502 Addressing Modes_files/ga.js" type="text/javascript"></script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-9026746-2");
pageTracker._trackPageview();
} catch(err) {}</script>
<hr align="LEFT">This page was last updated on 28th December 2003


</body></html>